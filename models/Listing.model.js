const mongoose = require("mongoose");
const { Schema, model } = mongoose;

const listingSchema = new Schema(
  {
    // unless you are defining more than the "type" property, you don't have to use {} (see below)
    // firstName: {type: String, require: true}
    title: {
      type: String,
      required: true // need to make fields required
    },
    brand:  {
      type: String,
      // required: true
    },

    size: { // will add a size charge on mouseover
      type: String,
      // required: true,
      enum: [
        "Extra Small", 
        "Small", 
        "Medium", 
        "Large", 
        "Extra Large",
        "Other"
      ],
      default: "Medium"
    },
    condition: {
      type: String,
      // required: true,
      enum: [
        "Brand New", 
        "Good", 
        "Fair"
      ],
      default: "Good"
    },
    category: {
      type: String,
      // required: true,
      enum: [
        "Pants & Shorts", 
        "Suits & Jackets", 
        "Shirts & Buttondowns", 
        "Dresses & Skirts", 
        "Shoes",
        "Accessories",
        "Other"
      ],
      // default: null
    },
    occasion: {
      type: String,
      // required: true,
      enum: [
        "Night Out", 
        "Business", 
        "Casual", 
        "Athleisure", 
      ],
      default: "Casual"  
    },  
    color: {
      type: String,
      // required: true,
      enum: [
        "Black", 
        "White", 
        "Red", 
        "Yellow", 
        "Blue",
        "Green",
        "Pink",
        "Orange",
        "Other"
      ],
      // default: null
    },
    // size: { type: Schema.Types.ObjectId, ref: 'ListingSize' }, // make these properties of these schema
    // condition: { type: Schema.Types.ObjectId, ref: 'ListingCondition' }, // enum to display array of items instead
    // category: { type: Schema.Types.ObjectId, ref: 'ListingCategory' },
    // color: { type: Schema.Types.ObjectId, ref: 'ListingColor' },
    description: String,
    // we want to reference users inside the listing model and for that we will use their IDs
    // this is telling us that in "user" property of each listing object, we will have
    // saved ObjectId (id that is automatically generated by MongoDB) that belongs to one of the users from the users collection
    // image: {
    //   type: String,
    //   required: true
    // },
    
    user: { type: Schema.Types.ObjectId, ref: "User" },
    price: { 
      type: Number,
      // required: true,
     }, // find out how to make it 2 decimals for price
    rating: Number, // v2 may not need it
    // imagesArray: { type: [String]} // added this for the images
    imageURL: { type: String }
    // photos: {
    //   type: [
    //     {
    //       type: Schema.Types.ObjectId,
    //       // required: true,
    //       ref: "ListingPhoto"
    //     }
    //   ]
    // },
  },
  {
    timestamps: true
  }
);

// const Listing = model('Listing', ListingSchema);
// module.exports = user;

const Listing = model("Listing", listingSchema);
module.exports = Listing;
